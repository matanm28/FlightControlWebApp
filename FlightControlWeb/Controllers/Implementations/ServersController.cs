namespace FlightControlWeb.Controllers.Implementations {
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Text;
    using System.Threading.Tasks;
    using DataAccessLibrary.DataAccess.Interfaces;
    using DataAccessLibrary.Models;
    using FlightControlWeb.Controllers.Interfaces;
    using Microsoft.AspNetCore.Mvc;

    [Route("api/[controller]")]
    [ApiController]
    public class ServersController : ControllerBase, IServersController {
        private const string Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        private const int ModNumber = 1000;
        private const char Delim = '-';
        private static readonly char[] BadChars = { '\n', '\r', ' ', '\t', };
        private readonly IServerService serverService;

        /// <inheritdoc />
        public ServersController(IServerService serverService) {
            this.serverService = serverService;
        }

        // GET: api/ApiServers
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Server>>> GetApiServer() {
            return await this.serverService.GetAllAsync();
        }

        // GET: api/ApiServers/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Server>> GetApiServer(string id) {
            var apiServer = await this.serverService.FindAsync(id);
            if (apiServer == null) {
                return this.NotFound();
            }

            return this.Ok(apiServer);
        }

        // POST: api/ApiServers
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost]
        [SuppressMessage("Compiler", "CS8604", Justification = "IServerService.ExistsAsync Can't return null")]
        [SuppressMessage("Compiler", "CS8602", Justification = "server Can't be null")]
        public async Task<ActionResult<Server>> PostApiServer(Server server) {
            var tempServer = await this.serverService.FindAsync(server);
            if (tempServer != null) {
                return Conflict($"A server with same exact URL already exists on this server.\nTry using 'api/Servers/{{id}}' with '{tempServer.Id}' as 'id'");
            }

            validateServerId(server);
            if (await this.serverService.ExistsAsync(server?.Id)) {
                if (!hasAutoGeneratedId(server)) {
                    return Conflict(
                            $"A server with same exact Id already exists on this server.\nId must be unique."
                            + $"\nTry using 'api/Servers/{{id}}' with '{server?.Id}' as 'id'");
                }

                do {
                    server.Id = generateServerId(server.URL);
                }
                while (await this.serverService.ExistsAsync(server.Id));
            }

            await this.serverService.AddAsync(server);
            await this.serverService.SaveChangesAsync();

            return this.CreatedAtAction(
                    "GetApiServer",
                    new { id = server.Id },
                    $"Server with id: '{server.Id}' added successfully.\n" + $"Access at route: \"api/Servers/{{id}}\"");
        }

        // DELETE: api/ApiServers/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Server>> DeleteApiServer(string id) {
            var apiServer = await this.serverService.RemoveAsync(id);
            if (apiServer == null) {
                return this.NotFound($"A server with id:'{id}' does not exists");
            }

            await this.serverService.SaveChangesAsync();
            return apiServer;
        }

        private void validateServerId([NotNull] Server server) {
            if (string.IsNullOrEmpty(server.Id)) {
                server.Id = generateServerId(server.URL);
            }

            string temp = server.Id.Trim(BadChars);
            if (server.Id.Length != temp.Length) {
                server.Id = temp.Length > 0 ? temp : generateServerId(server.URL);
            }
        }

        private string generateServerId([NotNull] string url, int charsLength = 3, int numsLength = 3, bool useDelim = true) {
            Random random = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < charsLength; i++) {
                sb.Append(Chars[random.Next(Chars.Length)]);
            }

            if (useDelim) {
                sb.Append(Delim);
            }

            sb.Append(Math.Abs(url.GetHashCode() % ModNumber));

            return sb.ToString();
        }

        private static bool hasAutoGeneratedId(Server server) {
            // only needed to suppress warnings
            if (server?.URL == null || server.Id == null) {
                return false;
            }

            return server.Id.Contains(Math.Abs(server.URL.GetHashCode() % ModNumber).ToString());
        }
    }
}